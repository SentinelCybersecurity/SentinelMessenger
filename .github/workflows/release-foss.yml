name: Build & Release FOSS APK with Metadata

on:
    workflow_dispatch:
    push:
        branches:
            - main

jobs:
    build-release:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Verify GitHub token (GH_PAT) is set
              run: |
                  if [ -z "${{ secrets.GH_PAT }}" ]; then
                      echo "❌ GitHub token 'GH_PAT' is missing."
                      echo "Please set the 'GH_PAT' secret in your repository settings. Must be a token classic with Permissions read:org, repo, workflow"
                      exit 1
                  else
                      echo "✅ GitHub token 'GH_PAT' is set."
                  fi

            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: 'temurin'

            - name: Make Gradle wrapper executable
              run: chmod +x ./gradlew

            - name: Build APK with Gradle
              run: ./gradlew :app:assembleProdFossWebsiteRelease

            - name: List merged manifest files
              run: find app/build/intermediates/merged_manifests/ -name "AndroidManifest.xml"

            - name: Extract APK and manifest metadata
              id: apk_info
              run: |
                  APK_PATH=$(find app/build/outputs/apk/ -name "*.apk" | head -n 1)
                  MANIFEST=$(find app/build/intermediates/merged_manifests/ -name "AndroidManifest.xml" | head -n 1)

                  VERSION_NAME=$(grep "android:versionName=" "$MANIFEST" | sed 's/.*versionName="//;s/".*//')
                  VERSION_CODE=$(grep "android:versionCode=" "$MANIFEST" | sed 's/.*versionCode="//;s/".*//')
                  PACKAGE_NAME=$(grep "package=" "$MANIFEST" | sed 's/.*package="//;s/".*//')

                  echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
                  echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
                  echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
                  echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
                  echo "release_tag=v$VERSION_NAME" >> $GITHUB_OUTPUT

            - name: Show APK path and release tag
              run: |
                  echo "APK path: ${{ steps.apk_info.outputs.apk_path }}"
                  echo "Release tag: ${{ steps.apk_info.outputs.release_tag }}"

            - name: Decode keystore from secret
              run: |
                  echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > my-release-key.jks

            - name: Install apksigner and zipalign
              run: sudo apt-get update && sudo apt-get install -y apksigner zipalign

            - name: Sign APK
              id: signed_apk
              run: |
                  ORIGINAL_APK="${{ steps.apk_info.outputs.apk_path }}"
                  CLEAN_NAME=$(basename "$ORIGINAL_APK" | sed 's/-unsigned//')
                  SIGNED_APK_NAME="${CLEAN_NAME%.apk}-signed.apk"

                  apksigner sign \
                      --ks my-release-key.jks \
                      --ks-key-alias ${{ secrets.KEY_ALIAS }} \
                      --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
                      --key-pass pass:${{ secrets.KEY_PASSWORD }} \
                      --out "$SIGNED_APK_NAME" "$ORIGINAL_APK"

                  echo "apk_path=$SIGNED_APK_NAME" >> $GITHUB_OUTPUT

            - name: Compute SHA256 hash of signed APK
              id: apkhash
              run: |
                  HASH=$(sha256sum "${{ steps.signed_apk.outputs.apk_path }}" | awk '{print $1}')
                  echo "apk_hash=$HASH" >> $GITHUB_OUTPUT

            - name: Generate APK metadata JSON
              run: |
                  APK_FILENAME=$(basename "${{ steps.signed_apk.outputs.apk_path }}")
                  cat <<EOF > index-v1.json
                  {
                      "packages": {
                          "${{ steps.apk_info.outputs.package_name }}": [
                              {
                                  "versionName": "${{ steps.apk_info.outputs.version_name }}",
                                  "versionCode": ${{ steps.apk_info.outputs.version_code }},
                                  "apkName": "$APK_FILENAME",
                                  "apkSha256": "${{ steps.apkhash.outputs.apk_hash }}"
                              }
                          ]
                      }
                  }
                  EOF

            - name: Show generated metadata
              run: cat index-v1.json

            - name: Debug GitHub token and release access
              run: |
                  echo "${{ secrets.GH_PAT }}" | gh auth login --with-token
                  gh auth status
                  gh release list
              env:
                  GH_PAT: ${{ secrets.GH_PAT }}

            - name: Create GitHub release with APK and metadata
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.apk_info.outputs.release_tag }}
                  name: Release ${{ steps.apk_info.outputs.version_name }}
                  files: |
                      ${{ steps.signed_apk.outputs.apk_path }}
                      index-v1.json
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_PAT }}

            - name: Verify release and assets
              run: |
                  TAG=${{ steps.apk_info.outputs.release_tag }}
                  APK_NAME=$(basename "${{ steps.signed_apk.outputs.apk_path }}")
                  RELEASE_INFO=$(gh release view "$TAG" --json assets --jq '.assets[].name')

                  echo "🔍 Assets found in release $TAG:"
                  echo "$RELEASE_INFO"

                  if echo "$RELEASE_INFO" | grep -q "$APK_NAME" && echo "$RELEASE_INFO" | grep -q "index-v1.json"; then
                      echo "✅ Release $TAG verified successfully with expected assets."
                  else
                      echo "❌ Release $TAG is missing expected assets."
                      exit 1
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_PAT }}
